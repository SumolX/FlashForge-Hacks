#!/bin/ash

# Includes
BASEDIR=$(dirname "$0")
. "$BASEDIR/constants"
. "$BASEDIR/utils"

# /cgi-bin/filesystem
fs_on_list() {
    firstpass=0
    echo "Content-Type: text/html"
    echo ""
    echo -e -n "{\"files\":["
    find $DATA_PATH -iname '*.g*' -print0 | xargs -0 -n 1 echo | while read file
    do
        [ -z "$file" ] && break
        detail="$(echo $file | sed -e 's@\ @\\ @g' | xargs ls -l)"
        format="$(echo $detail | awk '{printf "{\"date\":\"%s %s %s\",\"size\":%s,", $6,$7,$8,$5}')"
        [ $firstpass == 1 ] && echo -e -n "," || firstpass=1
        echo -e -n "$format \"file\":\"${file##*/}\"}"
    done
    echo -e -n "]}"
}

# /cgi-bin/filesystem?download=filename
fs_on_download() {
    if test "$?" -eq 0 -a -f ${DATA_PATH}/$1; then
        utils_send_binary_file "${DATA_PATH}" "$1"
        echo "Status: 200 OK"
    else
        echo "Status: 404 Not Found"
    fi
}

# /cgi-bin/filesystem?upload=filename
fs_on_upload() {
    file=$(mktemp)
    cat - > $file
    if [ "$(tail -n 1 < $file)" != "Status: 200 OK" ]; then
        rm -rf $file
        echo "Status: 409 Conflict"
    else
        sed -i '$ d' $file
        mv $file ${DATA_PATH}/$1
        echo "Status: 200 OK"
    fi
}

# Parse Request: cgi-bin/list
if [ -z $QUERY_STRING ]; then
    fs_on_list
else
    IFS="&"
    set -- $QUERY_STRING
    key="${1%=*}"
    if [ "$key" = "download" ]; then
        fs_on_download "${1#*=}"
    elif [ "$key" = "upload" ]; then
        fs_on_upload "${1#*=}"
    else
        echo "Status: 400 Bad Request"
        exit 1
    fi
fi
